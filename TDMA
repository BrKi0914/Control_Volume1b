def TDMA (aU, aP, aD, aUp, aPp, aDp, b, Hn, Hs):

# TDMA algorithm in the z-direction for either enthalpy-based or temperature
# based CV models.
# Sweep from top to bottom.    
    
    N = 4
    E = np.zeros(N)
    P = np.zeros(N)
    Q = np.zeros(N)
    H = np.zeros(N)
    
# find coef E
    
    for k in range (1,N-1):
        E[k] = aUp[k] * Hn[k-1] + aPp[k] * Hn[k] + aDp[k] * Hn[k+1] + b[k]
    E[N-1] = aUp[N-1] * Hn[N-2] + aPp[N-1] * Hn[N-1] + b[N-1]
    

# upper boundary

    H[0] = Hs

# lower boundary
    
    P[N-1] = aU[N-1]/aP[N-1]
    Q[N-1] = E[N-1]/aP[N-1]

# define recursion relations

    for k in range(N-2,0,-1):
        fac = aP[k] - aD[k] * P[k+1]
        P[k] = aU[k]/fac
        Q[k] = (E[k] + aD[k] * Q[k+1]) / fac
    
# solve for enthalpy at the grid points
    
    for k in range(1,N):
        H[k] = P[k] * H[k-1] + Q[k]
    return H
    
#---------------------------------------example

# import libraries
import numpy as np

n=4;
Hs = 1
Hn = np.ones(n)+7
aUp = np.ones(n)+3
aPp = np.ones(n)+4
aDp = np.ones(n)+5
b = np.ones(n)+6
aP = np.ones(n)
aD = np.ones(n)+1
aU = np.ones(n)+2
TDMA(aU, aP, aD, aUp, aPp, aDp, b, Hn, Hs)
