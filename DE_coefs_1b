def DE_coefs_1b(dtf,dt1mf,DzC,Kedz,QS,qb,qbn):
    
# Find DE coefs for CV code cv1b.m

# - diffusion:              yes
# - advection:              no
# - composite materials:    yes
# - melting:                yes
# - source term:            yes

# Note: for unconditional stability, aPp should be greater than 0.  This can
# fail if the time step dt is too large.

    for k in range(1,N-1):
        aU[k] = dtf * Kedz[k]
        aUp[k] = dt1mf * Kedz[k]
        aD[k] = dtf * Kedz[k]
        aDp[k] = dt1mf * Kedz[k+1]
        aP[k] = DzC[k] + dtf * (Kedz[k] + Kedz[k+1])
        aPp[k] = DzC[k] - dt1mf * (Kedz[k] + Kedz[k+1])
        b[k] = QS[k]
    
# lowest CV    
    
    k = N-1
    aU[k] = dtf * Kedz[k]
    aUp[k] = dt1mf * Kedz[k]
    aD[k] = 0
    aDp[k] = 0
    aP[k] = DzC[k] + dtf * Kedz[k]
    aPp[k] = DzC[k] - dt1mf * Kedz[k]
    b[k] = QS[k] - dtf*qb - dt1mf*qbn
    
    return aU,aP,aD,aUp,aPp,aDp,b
    
#-------------------------example

# import libraries
import numpy as np

N = 4
dtf = 3
aU = np.zeros(N)
dt1mf = 2
DzC = np.zeros(N)+4
Kedz = np.zeros(N)
QS = np.zeros(N)+1
qb = 5
qbn = 8

aP = np.zeros(N)
aD = np.zeros(N)
aUp = np.zeros(N)
aPp = np.zeros(N)
aDp = np.zeros(N)
b = np.zeros(N)

# upper boundary & interior points

DE_coefs_1b(dtf,dt1mf,DzC,Kedz,QS,qb,qbn)
